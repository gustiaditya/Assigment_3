{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assignment3.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "kJ66no_DuD87",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "x = iris.iloc[:, 2 :-1].values #for petal_length and petal_width variable\n",
        "y = iris.iloc[:, -1].values #for label\n",
        "w0=[] #variable for w0\n",
        "for i in range (1,151):\n",
        "    w0.append(np.array([1]))\n",
        "x = np.append(x, w0, axis=1)"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UWmAyACfugxj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "y = le.fit_transform(y)\n"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2xMOfPwyujPH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "first_y = np.where(y == 0,0,1)\n",
        "print(len(first_y))\n",
        "print(first_y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UbvXFnTjurUM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "var_x = x\n",
        "var_y = np.reshape(first_y,(-1,1))\n",
        "var_x = np.append(var_x, var_y, axis =1)\n",
        "np.random.shuffle(var_x)\n",
        "first_y = var_x[:,-1]\n",
        "first_x = var_x[:,:-1]"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M9gz1dluuvO8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "np.random.seed(42)\n",
        "no_of_inputs = 2\n",
        "weights = np.random.randn(no_of_inputs +1)\n",
        "print(\"Initial weight %s\" % weights)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W9LWoEP3u1NN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "iters = 1000\n",
        "learning_rate = 0.1\n",
        "total = 0\n",
        "for i in range (iters):\n",
        "    for _x, _y in zip(first_x, first_y):\n",
        "        summation = np.dot(_x,weights)\n",
        "        if summation >= 0:\n",
        "            predicted = 1\n",
        "        else:\n",
        "            predicted = 0\n",
        "        total += 1 if predicted == _y else 0\n",
        "        weights += learning_rate * (_y - predicted) * _x\n",
        "print(\"trained: \" + str(weights)) \n",
        "train_x1 = [0,  abs((weights[2]/weights[1]))]\n",
        "train_x2 = [abs((weights[2]/weights[0])), 0]\n",
        "print(\"trainX1 :\" + str(train_x1))\n",
        "print(\"trainX2: \"+ str(train_x2))\n",
        "print(\"Accuracy for this train: \" + str((total/iters)/len(first_x)))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cqq71IpUu4RS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "vis_y = np.reshape(y,(-1,1))\n",
        "vis_x = np.append(x, vis_y, axis=1) \n",
        "\n",
        "plt.scatter(vis_x[(vis_x[:,3]==0),0],vis_x[(vis_x[:,3]==0),1] ,c = 'red', s= 10, label = 'setosa')\n",
        "plt.scatter(vis_x[(vis_x[:,3]==1),0],vis_x[(vis_x[:,3]==1),1] ,c = 'blue', s= 10, label = 'versicolor')\n",
        "plt.scatter(vis_x[(vis_x[:,3]==2),0],vis_x[(vis_x[:,3]==2),1] ,c = 'green', s= 10, label = 'verginica')\n",
        "plt.plot(train_x1,train_x2, c= 'black', label = 'boundary line 1')\n",
        "plt.title('Iris Petal Comparison')\n",
        "plt.xlabel('petal_length')\n",
        "plt.ylabel('petal_width')\n",
        "plt.legend(loc=\"upper right\")\n",
        "plt.show"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RBe2u6nHu6sS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y = np.reshape(y, (-1,1))\n",
        "new_iris= np.append(x, y , axis = 1)\n",
        "new_iris = new_iris[50:,:] \n",
        "new_iris[:,-1] = np.where(new_iris[:,-1]== 1, 0, 1)\n",
        "np.random.shuffle(new_iris)\n",
        "third_x = new_iris[:,:-1]\n",
        "third_y = new_iris[:,-1]"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZLQoG2_mvBH8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "np.random.seed(43)\n",
        "no_of_inputs = 2\n",
        "weights_second = np.random.randn(no_of_inputs +1 )\n",
        "print(\"Initial weight %s\" % weights_second)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Og5MIhoBvE3p",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "iters = 3000\n",
        "learning_rate = 0.001\n",
        "total = 0\n",
        "for i in range(iters):\n",
        "  for _x, _y in zip(third_x, third_y):\n",
        "    summation = np.dot(_x, weights_second) \n",
        "    if summation >= 0: \n",
        "      predicted = 1\n",
        "    else: \n",
        "      predicted = 0\n",
        "    total += 1 if predicted == _y else 0\n",
        "    weights_second += learning_rate * (_y - predicted )* _x\n",
        "print(\"trained: \" + str(weights_second)) \n",
        "second_x1 = [0,  abs((weights_second[2]/weights_second[1]))]\n",
        "second_x2 = [abs((weights_second[2]/weights_second[0])), 0]\n",
        "print(\"trainX1 :\" + str(second_x1))\n",
        "print(\"trainX2: \"+ str(second_x2))\n",
        "print(\"Accuracy for this train: \" + str((total/iters)/len(third_x)))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xOoQEsq7vK1w",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plt.scatter(vis_x[(vis_x[:,3]==0),0],vis_x[(vis_x[:,3]==0),1] ,c = 'red', s= 10, label = 'setosa')\n",
        "plt.scatter(vis_x[(vis_x[:,3]==1),0],vis_x[(vis_x[:,3]==1),1] ,c = 'blue', s= 10, label = 'versicolor')\n",
        "plt.scatter(vis_x[(vis_x[:,3]==2),0],vis_x[(vis_x[:,3]==2),1] ,c = 'green', s= 10, label = 'verginica')\n",
        "plt.plot(train_x1,train_x2, c= 'black', label = 'boundary line 1')\n",
        "plt.plot(second_x1, second_x2, c='red', label= 'boundary line 2')\n",
        "plt.legend(loc=\"upper right\")\n",
        "plt.show"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
